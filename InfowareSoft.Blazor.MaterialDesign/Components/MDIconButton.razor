@inherits DOMComponent

<button class="@ClassMapper.Class"
        aria-label="@Label" aria-hidden="true" aria-pressed="false"
        @ref="Ref" @onclick="OnClickHandler" @attributes="@Attributes">

    @if (!ToogleOn.HasValue || CompactSyntax)
    {
        @Icon
    }
    else
    {
        @if (Icon.HasValue && !CompactSyntax)
        {
            <MDIcon Class="mdc-icon-button__icon mdc-icon-button__icon--on" Icon="@Icon.Value"></MDIcon>
        }
        @if (IconOff.HasValue)
        {
            <MDIcon Class="mdc-icon-button__icon" Icon="@IconOff.Value"></MDIcon>
        }
        @ChildContent
    }
</button>

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        ClassMapper.Base("mdc-icon-button")
            .If(() => Disabled, "Disabled")
            .If(() => !ToogleOn.HasValue || CompactSyntax, "material-icons")
            .If(() => ToogleOn.HasValue && ToogleOn.Value, "mdc-icon-button--on");
    }

    [Parameter] public bool? ToogleOn { get; set; } = null;
    [Parameter] public bool CompactSyntax { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public MDIconEnum? Icon { get; set; }
    [Parameter] public MDIconEnum? IconOff { get; set; }
    [Parameter] public bool Disabled { get; set; }

    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

    protected void OnClickHandler(MouseEventArgs ev)
    {
        OnClick.InvokeAsync(ev);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsInvokeAsync<object>("mdcjs.mdIconButton.init", Ref);
        }
    }

}
